3장 

useReducer 훅을 사용해 컴포넌트 상태 관리하기
컴포넌트가 상태를 다수의 자식에게 제공해야 하는 경우에 상태 값을 항상 함께 갱신해야만 하거나 상태 갱신 로직이 지나치게 흩어져 있어서 따라가기 어려운 경우, 상태 갱신을 대신 관리하는 함수를 정의하는 편이 좋다.
이런 함수를 리듀서(Reducer)함수라고 부른다

예로는 데이터 적재<리액트에서는 서버에서 데이터를 가져와서 그 데이터를 화면에 보여주는 일이 자주 일어나요. 이때 서버에서 데이터를 가져오는 작업을 데이터 적재라고 해요.>가 있다. 
컴포넌트가 게시물을 요청하면 적재 중 상태를 true로, 오류 상태를 null로, 포스트를 빈 배열로 설정할 수 있다. 따라서 이 경우 이벤트 하나가 세 가지 상태를 변경한다. 이런 상태 값들을 useState 훅을 통해 관리할 수도 았자먼 이벤트에 대한 반응으로 항상 여러 가지 갱신 함수(setIsLoading, setError,setPosts)를 호출해야 하는 경우 리액트는 useReducer 훅을 사용하면 더 깔끔하다.

3-1 단일 이벤트에 대한 응답으로 여러 상태 값 갱신하기
리액트는 관리해야 하는 상태에 대해 원하는 만큼 useState를 호출할 수 있다. 하지만 컴포넌트가 여러 상태 값을 유지해야 할 수 있고 그 상태 값들이 서로 연관된 경우가 종종 있다.
이런 경우 한 가지 행동에 대한 여러 상태 값을 갱신하고 미처 정리되지 않은 상태값을 방치하지 않도록 주의해야 한다.

3-1-1 예측할 수 없는 상태 변경으로 사용자 방해하기
그림3.1참고
사용자가 그룹을 선택할 때 ui로 표시할 상태를 신중하게 고려해야 한다. 그렇지 않으면 사용자의 생각이 방해를 받고 업무를 처리하기 더 어려워진다.

3-1-2 예측 가능한 상태 변경으로 사용자의 집중력 유지하기
예를들면 예약 앱은 작업에 집중할 수 있도록 도와야 하는데 "방을 예약하고 케이터링을 주문할 거야"라고 생각해야하는데, "어떤 버튼을 눌러야 하지? 클릭했나? 열였나?"라고 생각하게 해서는 안 된다.
사용자가 그룹을 선택한 후 ui가 예측 가능한 상태에 도달하게 해야한다.
상태 닶이 서로에게 영향을 끼치거나 종종 함께 변경되는 경우, 변경을 수행하는 코드를 여러 이벤트 핸들러 함수에 분산시키는 것보다는 상태 갱신 로직을 한 곳에 모으는 것이 도움이 될 수 있다. 리액트는 이런 상태 갱신 로직 모음을 관리하기 위해 useReducer 훅을 제공한다.

3-2 useReducer로 더 복잡한 상태 관리하기
서로 연관된 상태가 여럿 존재하는 경우, 리듀서를 사용하면 상태 변경을 더 쉽게 만들고 이해할 수 있다.
-리듀서는 상태에 영양을 미치는 명확한 액션을 통해 상태 변경을 중앙 집중식으로 잘 정의해 관리.
-리듀서는 액션을 사용해 이전 상태로부터 새 상태를 생성, 서로 연관된 여러 상태를 포함할 수 있는 좀 더 복잡한 갱신을 더 쉽게 지정할 수 있다.
-useReducer 훅을 통해 컴포넌트의 초기 상태를 지정하고, 현재 상태에 접근하며 상태를 갱신하고 재렌더링을 촉발할 수 있다.
-명확하게 정의된 액션을 디스패치하면 상태 변경을 따라가기 쉽고, 컴포넌트가 여러 이벤트에 대한 응답으로 상태와 상호작용하는 방식을 이해하기 쉽다.

3-2-1 미리 정의된 액션과 리듀서를 사용해 상태 갱신하기
리듀서는 상태 값과 액션 값을 받는 함수이다. 리듀서는 인자로 받은 상태 값과 액션값을 가지고 새 상태 값을 생성한다.
리듀서는 상태를 갱신하는 모든 방법을 한 장소에 모아두기 떄문에, 한 액션이 여러 상태 값에 영향을 주는 경우 특히 상태 변경을 쉽게 관리할 수 있다.

3-2-3 useReducer를 사용해 컴포넌트 상태에 접근하고 액션 디스패치하기
useState 훅을 사용하면 리액트에게 컴포넌트의 상태 값을 하나 관리하게 할 수 있었다. useReducer 훅을 사용하면 리듀서와 컴포넌트의 초기 상태를 전달해서 리액트가 값을 관리하는데 더 도움을 줄 수 있다. 애플리 케이션에서 이벤트가 발생하면 우리는 리액트에게 새 값을 전달하는 대신
액션을 디스패치하고, 리액트는 리듀서에 있는 관련 코드를 사용해 새 상태를 생성한 다음, 최신 ui를 위해 컴포넌트를 호출한다.

리듀서는 컴포넌트 상태가 복잡해질수록 코드와 상태 변이를 더 쉽게 구조화하고 코드를 더 잘 이해하게 해줄 수 있다.
