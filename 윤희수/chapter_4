3-4 useReducer 개념 다시 살펴보기

핵심 용어
초기 상태 - 컴포넌트가 최초로 실행될 때 컴포넌트 내의 변수와 프로퍼티의 값들
액션 - 리듀서가 상태를 갱신하기 위해 사용할 정보
리듀서 - 리액트가 현재 상태와 액션을 전달할 함수, 리듀서는 액션에 따라 현재 상태로부터 적절한 새 상태를 생성함
상태 - 컴포넌트가 실행되는 어떤 시점에 컴포넌트 내의 변수와 프로퍼티의 값들
디스패치 함수 - 액션을 리듀서에게 기스패치하기 위한 함수, 이를 통해 리듀서에게 어떤 액션을 수행할지 전달함 

useReducer를 통해 리액트에게 리듀서와 초기 상태를 전달하면, 리액트가 상태를 관리한다.
우리는 액션을 디스패치하면 되고, 리액트가 리듀서를 사용해 전달받은 액션에 따라 상태를 갱신한다. 
컴포넌트 코드는 ui에 대한 서술을 반환하고, 상태가 갱신되고나면 이랙트는 ui를 갱신할 필요가 있는지 알기 때문에 컴포넌트 코드를 다시 호출해준다.
컴포넌트가 실행되면 코드 안에서 useReducer를 호출하면 리액트가 최신 상태와 useReducer가 최초 호출할 때 돌려줬던 디스패치 함수를 컴포넌트에게 돌려준다.

3-5요약

-서로 연관된 여러 상태가 있다면, 리듀서를 사용해 상태를 변경할 수 있는 액션을 명확히 정의해야한다. 리듀서는 현재 상태와 액션을 받을 수 있는 함수다. 리듀서는 액션을 사용해 새로운 상태를 생성하고 이 새 상태를 반환한다.
-컴포넌트의 상태와 리듀서를 리액트가 관리하게 하려면 useReducer 훅을 호출해서 리듀서와 초기상태를 전달한다. useReducer는 현재 상태와 디스패치 함수를 포함하는 배열을 반환한다.
-useReducer 훅이 최초로 호출될 때 초기 상태를 생성하고 싶다면, 초기화 인자와 초기화 함수를 사용해 useReducer 훅을 호출한다. useReducer 훅은 자동으로 초기화 인자를 초기화 함수에게 전달, 초기화 함수는 리듀서에서 사용할 초기 상태를 반환한다.
초기화 비용이 많이 들거나 상태를 초기화 하기 위해 기존 함수를 사용해야 한다면 이 방법이 유용
-dispatch 함수를 사용해 액션을 디스패치, 리액트는 리듀서가 반환하는 상태로 컴포넌트의 상태를 갱신한다. 상태가 달라지면 이랙트가 컴포넌트를 다시 렌더링한다.
-컴포넌트가 useReducer를 호출할 때마다 리액트는 항상 동일한 디스패치 함수를 반환한다.

4장
리액트는 데이터를 ui로 변환한다.
각 컴포넌트는 자신의 역할을 하면서 전체 사용자 인터페이스에 기여한다. 
갱신해야 할 항목을 효율적으로 결정하고 변경사항을 스케줄링하는 일을 탁원하게 한다.

하지만 컴포넌트가 이 데이터 흐름 밖으로 벗아나 다른 api와 직접 상호작용해야 할 때는 어떤 방식으로든 외부에 영향을 미치는 동작을 부수 효과(side effect)라고 한다.

4-1-1 매번 렌더링이 일어난 다음에 부수 효과 실행하기 
리액트는 매번 렌더링을 수행한 다음, 브라우저가 페이지를 다시 그린후, useEffect에 전달된 효과 함수를 실행하고 효과 함수의 요청에 따라 페이지 제목을 갱신한다. 
여기서 효과 함수가 컴포넌트와 같은 영역 안에 있기 떄문에 컴포넌트 내의 변수에 접근할 수 있다.

4-1-2 컴포넌트가 마운트될 떄만 효과 실행하기
리액트는 컴포넌트가 효과를 호출한 마지막 시간 이후로 이 의존 관계 목록의 값이 변경됬는지 확인해서 효과를 실행할지 여부를 결정한다. 리스트를 빈 배열로 설정하면 리스트가 결코 변경되지 않고, 그로인해 컴포넌트가 처음 마운트될 떄만 한 번 실행된다.

4-1-3 함수를 반환해서 부수 효과 정리하기
리액트는 컴포넌트를 언마운트할 때 함수를 실행한다. 하지만 이 시점이 정리 함수를 실행하는 유일한 시점은 아니다.
컴포넌트가 재렌더링될 때마다 리액트는 효과 함수를 다시 실행하기 전에 정리 함수를 호출한다. 다만, 효과 함수를 다시 실행해야만 하는 경우에만 그렇다.
여러효과를 다시 실행해야 하는 경우 리액트는 다시 실행해야 하는 모든 효과에 대한 정리 함수를 호출한다. 정리가 완료되면 리액트는 필요에 따라 다시 효과 함수를 실행한다.

4-1-4 의존 관계를 지정해서 효과 실행 시기 제어하기
컴포넌트를 호출할 때마다 리엑트는 useEffect 호출에 전달된 의존 관계의 값에 대한 기록을 유지한다. 의존 관계 값 배열이 마지막 호출 이후에 변경된 경우, 리액트는 해당 효과를 실행한다. 값이 변경되지 않는 경우, 리액트는 실행하지 않고 건너뛴다.
이로 인해 효과가 의존하는 값이 변경되지 않는 경우에는 효과를 실행하지 않고 효과가 수행하는 작업의 결과가 변경되지 않는다.

4-1-5 useEffect 훅을 호출하는 방법 요약

두 번째 인자가 없음 - 매번 렌더링이 끝난 다음에 실행됨
빈 배열을 두 번째 인자로 지정함 - 컴포넌트가 마운트될 때 단 한 번만 실행됨
두 번째 인자로 의존 관계 배열을 지정함 - 의존 관계 배열에 있는 값이 변할 때만 실행됨
함수를 반환함 - 컴포넌트가 언마운트되거나 효과를 다시 실행하기 전에 리액트가 정리 함수를 호출해 줌 

4-1-6 useLayoutEffect를  호출해 브라우저가 화면을 다시 그리기 전에 효과를 실행하기
대부분의 경우 useEffect를 호출해서 부수 효과를 상태와 동기화한다. 리액트는 컴포넌트가 렌더링되고 브라우저가 화면을 다시 그린 후에 효과를 실행한다.
때로 브라우저가 화면을 그리기 전에 리액트가 DOM을 갱신한 다음에 추가로 상태를 변경하고 싶을수도 있다.
DOM 엘리먼트의 크가를 사용해 상태를 설정하는 경우로, useEffect에서 상태를 바꾸면 사용자가 그 결과를 즉시 보게 되는데, 이 결과는 DOM 갱신 이후의 상태 변경으로 인해 곧 사라진다.
이 경우 useEffect에서 대신 useLayoutEffect 훅을 호출하면 빠른 상태 변화를 방지할 수 있다. 
useLayoutEffect는 useEffect와 동일한 API를 갖지만 리액트가 DOM을 갱신한 후 브라우저가 화면을 다시 그리기 전에 동기적으로 실행된다. 

4-2-2 JSON 서버 설정하기
실제 애플리케이션에서 수행하는 데이터 읽기 작업 예제를 보여주기 위해서는 HTTP를 통해 데이터를 제공해야 한다. 하지만 실제 데이터베이스를 실행할 필요는 없다.
json-server라는 npm 패키지를 사용한다. json패기지는 데이터를 rest api로 제공하는 편리하고 쉬운 방법이다.
server에서 사용자 가이드를 볼 수 있고, 가이드를 통해 이 패키지를 알 수 있다.

npm설치 명령어

npm install -g gson-server

4-2-3 useEffect 훅 안에서 데이터를 읽어오기
컴포넌트가 데이터 요청을 시작하기 전에 렌더링을 수행하는 방식을 렌더링 시 읽기(fetch on render)라고 한다. 

4-2-4 asyns와 await 사용하기
자바스크립트는 비동기 응답을 처리하기 위해 async함수와 await 키워드도 제공하지만, useEffect 훅과 이들을 함께 사용할 때 주의해야 할 점이 있다.
효과 함수를 async로 설정하면 리액트에게 문제가 생긴다. 리액트는 효과의 반환값이 정리 함수 일 것을 기대하는데 async 함수는 기본적으로 프로미스를 반환하기 때문이다. 이러한 문제를 해결하려면, 효과 함수 자체를 async로 지정하지 말고,
async 함수를 효과 함수 내부에 넣어야 한다.
